//Por falta de tiempo en la prueba no alcancé a completar el código del primer test. Sin embargo, me gustaría enviar la arquitectura de la solución.




// Proyecto: ASP.NET Core Web API con Entity Framework
// CRUD para tbl_docentes y tbl_cursos

//appsettings.json
"ConnectionStrings": {
    "DefaultConnection": "Server=SERVIDOR_DESTINO;Database=db_test_cesde;Trusted_Connection=True;MultipleActiveResultSets=true"
}



using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

// Contexto de la base de datos
public class ApplicationDbContext : DbContext
{
    public ApplicationDbContext(DbContextOptions<ApplicationDbContext> options) : base(options) { }
    
    public DbSet<Docente> Docentes { get; set; }
    public DbSet<Curso> Cursos { get; set; }
    public DbSet<CursoDocente> CursosDocentes { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<CursoDocente>().HasKey(cd => new { cd.DocumentoDocente, cd.IdCurso });
    }
}

// Modelos
public class Docente
{
    public int Id { get; set; }
    public string Nombre { get; set; }
    public string Documento { get; set; }
    public string Correo { get; set; }
    public ICollection<CursoDocente> CursosDocentes { get; set; }
}

public class Curso
{
    public int Id { get; set; }
    public string Nombre { get; set; }
    public string Descripcion { get; set; }
    public int Duracion { get; set; }
    public decimal Precio { get; set; }
    public DateTime FechaInicio { get; set; }
    public ICollection<CursoDocente> CursosDocentes { get; set; }
}

public class CursoDocente
{
    public string DocumentoDocente { get; set; }
    public Docente Docente { get; set; }
    public int IdCurso { get; set; }
    public Curso Curso { get; set; }
}

// Controlador de Docentes
[ApiController]
[Route("api/[controller]")]
public class DocentesController : ControllerBase
{
    private readonly ApplicationDbContext _context;
    public DocentesController(ApplicationDbContext context) { _context = context; }

    [HttpGet]
    public async Task<ActionResult<IEnumerable<Docente>>> GetDocentes()
    {
        return await _context.Docentes.ToListAsync();
    }

    [HttpPost]
    public async Task<ActionResult<Docente>> CreateDocente(Docente docente)
    {
        _context.Docentes.Add(docente);
        await _context.SaveChangesAsync();
        return CreatedAtAction(nameof(GetDocentes), new { id = docente.Id }, docente);
    }
}

//Controlador de Cursos
[ApiController]
[Route("api/[controller]")]
public class CursosController : ControllerBase
{
    private readonly ApplicationDbContext _context;
    public CursosController(ApplicationDbContext context) { _context = context; }

    [HttpGet]
    public async Task<ActionResult<IEnumerable<Curso>>> GetCursos()
    {
        return await _context.Cursos.ToListAsync();
    }

    [HttpPost]
    public async Task<ActionResult<Curso>> CreateCurso(Curso curso)
    {
        _context.Cursos.Add(curso);
        await _context.SaveChangesAsync();
        return CreatedAtAction(nameof(GetCursos), new { id = curso.Id }, curso);
    }
}



